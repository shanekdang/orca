-- THINGS TO KNOW:

-- 1.) geographic hierarchy: route -> trip -> shape
    


-- CREATE VIEWS

--DROP VIEW gtfs_test.v_gtfs_trip_directions_corrected
--DROP VIEW gtfs_test.v_corrected_orca_directions
--DROP VIEW gtfs_test.v_gtfs_service_exceptions
--DROP VIEW gtfs_test.v_gtfs_trip_stop_sequence
--DROP VIEW gtfs_test.v_gtfs_trip_directions
--DROP VIEW gtfs_test.v_most_current_routes_with_associated_feed



-- list of most up-to-date and date-unique gtfs route data 
    -- "up-to-date" and "date-unique" meaning:
        -- routes of the same route_id, trac_agency_id, start_date, and end_date are ranked by feed_id
        -- the route data pertaining to the highest feed_id (larger number) is chosen as it is "latest"/most updated data produced
    -- this is to nullify processing outdated route data
--CREATE VIEW gtfs_test.v_most_current_routes_with_associated_feed AS (
--    WITH gtfs_data AS (
--        SELECT DISTINCT
--              f.feed_id 
--            , r.route_id
--            , r.route_short_name
--            , r.route_long_name
--            , f.agency_id AS trac_agency_id
--            , min(c.start_date) start_date
--            , max(c.end_date) end_date
--            , ROW_NUMBER() OVER (
--                 PARTITION BY f.agency_id, r.route_id, min(c.start_date), max(c.end_date)
--                 ORDER BY f.feed_id DESC
--              ) AS route_rank
--        FROM _test.real_transitland_routes AS r -- gtfs routes
--        JOIN _test.real_gtfs_feeds AS f -- gtfs feeds
--            ON r.feed_id = f.feed_id
--        JOIN _test.real_transitland_trips AS t -- gtfs trips (gateway join for gtfs calendar)
--            ON t.feed_id = r.feed_id
--                AND t.route_id = r.route_id
--        JOIN _test.real_transitland_calendar AS c -- gtfs calendar (for service dates, joins onto trips)
--            ON c.feed_id = t.feed_id
--                AND c.service_id = t.service_id
--        GROUP BY r.route_id, f.feed_id, f.agency_id, r.route_short_name, r.route_long_name 
--    )
--    SELECT 
--          feed_id
--        , route_id
--        , route_short_name
--        , route_long_name
--        , trac_agency_id
--        , start_date
--        , end_date
--        , route_rank
--    FROM gtfs_data
--    WHERE route_rank = 1
--);

--DROP VIEW gtfs_test.v_gtfs_trip_directions
-- list of all trips with classified cardinal direction, "alt trip id", as arrays of integers 
    -- cardinal direction identified by subtracting the last stop in the trip from the first in both lat and lon directions
--CREATE VIEW gtfs_test.v_gtfs_trip_directions AS (
--    SELECT DISTINCT 
--          r.feed_id
--        , r.route_id
--        , r.trac_agency_id
--        , t.shape_id
--        , t.trip_id
--        , t.service_id
--        , t.direction_id
--        , FIRST_VALUE(st.arrival_time) OVER (
--            PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--            ORDER BY st.stop_sequence 
--          ) AS first_stop_time -- ARRIVAL time OF FIRST stop IN trip 
--        , LAST_VALUE(st.departure_time) OVER ( 
--            PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--            ORDER BY st.stop_sequence ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
--          ) AS last_stop_time -- DEPARTURE time OF the LAST stop IN trip 
--        , ARRAY_AGG(st.stop_id) OVER (
--            PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--            ORDER BY st.stop_sequence ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
--          ) AS stops_arr -- ARRAY OF stop ids FOR trip
--        , array[
--              CASE -- WHEN LAST stop IN SEQUENCE latitude IS greater than the FIRST stop, THEN  north, otherwise south
--                WHEN (
--                    LAST_VALUE(s.stop_lat::numeric) OVER (
--                        PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--                        ORDER BY st.stop_sequence ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
--                    )
--                    - FIRST_VALUE(s.stop_lat::numeric) OVER (
--                        PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--                        ORDER BY st.stop_sequence) -- delta-y
--                ) > 0
--                    THEN 4::INT2 -- North
--                ELSE 5::INT2 -- South (IF THEY ARE EQUAL THEY ARE ALSO LABELED SOUTH)
--              END 
--            , CASE -- WHEN LAST stop IN SEQUENCE longitude IS greater than the FIRST stop, THEN  east, otherwise west
--                WHEN (
--                    LAST_VALUE(s.stop_lon::numeric) OVER (
--                        PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--                        ORDER BY st.stop_sequence ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
--                    )
--                    - FIRST_VALUE(s.stop_lon::numeric) OVER (
--                        PARTITION BY r.feed_id, r.route_id, r.trac_agency_id, t.shape_id, t.trip_id
--                        ORDER BY st.stop_sequence
--                    ) -- delta-x
--                ) > 0
--                    THEN 6::INT2 -- East
--                ELSE 7::INT2 -- West (IF THEY ARE EQUAL THEY ARE ALSO LABELED west)
--              END 
--          ] AS alt_direction_id 
--        , c.monday
--        , c.tuesday
--        , c.wednesday
--        , c.thursday
--        , c.friday
--        , c.saturday
--        , c.sunday
--    FROM gtfs_test.v_most_current_routes_with_associated_feed AS r -- list of most up-to-date and date-unique gtfs route data
--    JOIN  _test.real_transitland_trips AS t -- gtfs trips
--        ON t.feed_id = r.feed_id
--            AND t.route_id = r.route_id
--    JOIN _test.real_transitland_stop_times AS st -- gtfs stop times
--        ON st.feed_id = r.feed_id
--            AND st.trip_id = t.trip_id
--    JOIN _test.real_transitland_stops AS s -- gtfs stops
--        ON s.feed_id = r.feed_id
--            AND s.stop_id = st.stop_id
--    LEFT JOIN _test.real_transitland_calendar AS c -- gtfs calendar
--        ON c.feed_id = t.feed_id
--            AND c.service_id = t.service_id
--);


-- same view as trip_directions, but corrects the case of pierce transit (trac_agency_id = 6)
-- add 1 or 2 for direction_id = 1 and 0, respectively 
    -- in GTFS:
        -- 1 = inbound
        -- 0 = outbound
    -- in AVL:
        -- 1 = inbound
        -- 2 = outbound
-- corrects the cardinal direction accordingly (ex. if direction_id = 1 then cardinal direction can only be 4 and 6)
-- this correction is to join pierce transit gtfs to AVL more accurately
--CREATE VIEW gtfs_test.v_gtfs_trip_directions_corrected AS (
--    SELECT
--          feed_id 
--        , route_id
--        , trac_agency_id
--        , shape_id
--        , trip_id
--        , service_id
--        , direction_id
--        , first_stop_time
--        , last_stop_time
--        , stops_arr
--        , CASE 
--            WHEN trac_agency_id = 6 -- pierce transit
--                THEN array_append(
--                    CASE
--                        WHEN direction_id = 1 -- inbound
--                            THEN
--                                CASE 
--                                    WHEN ARRAY[4, 6]::INT2[] <@ alt_direction_id
--                                        THEN alt_direction_id
--                                    WHEN ARRAY[5]::INT2[] <@ alt_direction_id -- IF CONTAINS 5 remove it
--                                        THEN array_remove(alt_direction_id, 5)::INT2[]
--                                    WHEN ARRAY[7]::INT2[] <@ alt_direction_id -- IF CONTAINS 7 remove it
--                                        THEN array_remove(alt_direction_id, 7)::INT2[]
--                                    ELSE alt_direction_id
--                                END
--                        WHEN direction_id = 0 -- outbound
--                            THEN 
--                                CASE 
--                                    WHEN ARRAY[5, 7]::INT2[] <@ alt_direction_id
--                                        THEN alt_direction_id
--                                    WHEN ARRAY[4]::INT2[] <@ alt_direction_id -- IF CONTAINS 4 remove it
--                                        THEN array_remove(alt_direction_id, 4)::INT2[]
--                                    WHEN ARRAY[6]::INT2[] <@ alt_direction_id -- IF CONTAINS 6 remove it
--                                        THEN array_remove(alt_direction_id, 6)::INT2[]
--                                    ELSE alt_direction_id
--                                END
--                    END::INT2[],
--                    CASE -- ADD 1 OR 2 WHEN gtfs direction_id = 1 OR 0, respectively
--                        WHEN direction_id = 1 
--                            THEN 1::INT2
--                        WHEN direction_id = 0 
--                            THEN 2::INT2
--                    END
--                )::INT2[]
--            ELSE alt_direction_id
--          END AS alt_direction_id
--        , monday
--        , tuesday
--        , wednesday
--        , thursday
--        , friday
--        , saturday
--        , sunday
--    FROM gtfs_test.v_gtfs_trip_directions
--);


--DROP VIEW gtfs_test.v_gtfs_trip_stop_sequence
-- lists trip all necessary data pertaining to a trip including stops, stop sequence, and information of when the trip takes place in a week
--CREATE VIEW gtfs_test.v_gtfs_trip_stop_sequence AS (
--    SELECT DISTINCT 
--          t.feed_id
--        , t.route_id
--        , t.trac_agency_id
--        , t.trip_id
--        , t.shape_id
--        , t.direction_id
--        , t.alt_direction_id
--        , c.monday
--        , c.tuesday
--        , c.wednesday
--        , c.thursday
--        , c.friday
--        , c.saturday
--        , c.sunday
--        , st.arrival_time
--        , st.departure_time
--        , st.stop_id
--        , st.stop_sequence
--        , s.stop_location
--        , r.start_date
--        , r.end_date
--    FROM gtfs_test.v_gtfs_trip_directions_corrected AS t -- gtfs trips WITH cardinal directions added
--    JOIN _test.latest_gtfs_feeds_20240413 AS r -- list of most up-to-date and date-unique gtfs route data
--        ON r.feed_id = t.feed_id 
--            AND r.route_id = t.route_id
--    JOIN _test.real_transitland_stop_times AS st -- gtfs stop times
--        ON st.feed_id = t.feed_id
--            AND st.trip_id = t.trip_id
--    JOIN _test.real_transitland_stops AS s -- gtfs stops
--        ON s.feed_id = t.feed_id
--            AND s.stop_id = st.stop_id
--    LEFT JOIN _test.real_transitland_calendar AS c -- gtfs calendar
--        ON c.feed_id = t.feed_id
--            AND c.service_id = t.service_id
--    ORDER BY t.feed_id, t.trac_agency_id, t.route_id, t.trip_id, t.shape_id, st.stop_sequence ASC
--);



-- lists gtfs exception day data for trips and routes
    -- useful for joins between orca and gtfs since we want to account for exception days not listed under regular scheduled service days as well
--CREATE VIEW gtfs_test.v_gtfs_service_exceptions AS (
--    SELECT DISTINCT 
--          r.feed_id
--        , r.route_id
--        , r.trac_agency_id
--        , t.trip_id 
--        , cd.date
--        , cd.exception_type
--    FROM gtfs_test.v_most_current_routes_with_associated_feed AS r -- list of most up-to-date and date-unique gtfs route data 
--    JOIN  _test.real_transitland_trips AS t -- gtfs trips
--        ON  t.feed_id = r.feed_id
--            AND t.route_id = r.route_id
--    JOIN _test.real_transitland_calendar AS c -- gtfs calendar
--        ON c.feed_id  = t.feed_id
--            AND c.service_id = t.service_id
--    JOIN _test.real_transitland_calendar_dates AS cd -- gtfs calendar dates
--        ON cd.feed_id = c.feed_id  
--            AND cd.service_id = c.service_id 
--    ORDER BY r.feed_id, r.trac_agency_id, r.route_id, t.trip_id ASC
--);



-- UNUSED?
--CREATE VIEW gtfs_test.v_corrected_orca_directions  AS (
--    SELECT 
--        txn_id, 
--        corrected_direction_id AS direction_id
--    FROM (
--        SELECT  
--            b1.*, 
--            b2.stop_code, 
--            b2.device_location, 
--            b2.direction_id AS corrected_direction_id, 
--            ROW_NUMBER() OVER (
--                PARTITION BY b1.txn_id
--                ORDER BY abs_interval(b1.device_dtm_pacific - b2.device_dtm_pacific)
--            ) AS ranked, 
--            abs_interval(b1.device_dtm_pacific - b2.device_dtm_pacific) AS time_difference
--        FROM _test.boarding_april23 AS b1
--        JOIN _test.boarding_april23 AS b2
--            ON b1.route_number = b2.route_number 
--            AND b1.device_id = b2.device_id -- same tapping device
--            AND b1.coach_number = b2.coach_number -- same vehicle
--            AND b1.business_date = b2.business_date 
--            AND b1.direction_id = 3 
--            AND b2.direction_id != 3
--    ) ranked_data
--    WHERE ranked = 1 AND time_difference <= '00:30:00'
--);





-- PROCEDURE

CREATE OR REPLACE PROCEDURE gtfs_test.do_a_thing(_txn_id BIGINT)
LANGUAGE plpgsql AS $$
DECLARE 
    
    -- records 
    _orca_txn_rec RECORD;
    _gtfs_rec RECORD;
    _avl_rec RECORD;

    -- variables for final data to insert
    _gtfs_feed_id INT;
    _gtfs_route_id TEXT;
    _final_trip_id TEXT;
    _trac_agency_id INT;
    _orca_coach_number TEXT;
    _avl_route_id TEXT;
    _avl_stop_id TEXT;
    _avl_direction_id INT;
    _avl_departure_dtm_pacific TIMESTAMP;
    _avl_check_code NUMERIC;
    _trac_check_code INT;
    _gtfs_check_code NUMERIC;
    _direction_final INT;
    _direction_note INT;
    _stop_final TEXT;
    _stop_note INT;
    _stop_location geometry(point, 32610);

    -- variables needed to make comparisons and associations
    _orca_txn_dow INT; 
    _orca_device_dtm_interval INTERVAL;
    _orca_corrected_direction_id INT2;
    _trac_trip_id TEXT;
    _gtfs_trip_id TEXT;
    _trac_stop_id TEXT;
    _trac_time_difference INTERVAL;
    _gtfs_time_difference INTERVAL;
    _trac_stop_location geometry(point, 32610);
    _gtfs_stop_location geometry(point, 32610);

BEGIN
    
    -- get orca txn data and store record
    SELECT 
          orca.*
        , EXTRACT(DOW FROM orca.business_date) AS txn_dow
        , CASE  -- time INTERVAL CONVERSION; useful IN time expressions/equations later
            WHEN date_trunc('day', orca.device_dtm_pacific) > orca.business_date
                THEN TO_CHAR(orca.device_dtm_pacific, 'HH24:MI:SS')::INTERVAL + '24 hours'
            ELSE TO_CHAR(orca.device_dtm_pacific, 'HH24:MI:SS')::INTERVAL
          END AS device_dtm_interval
    INTO _orca_txn_rec
       FROM orca.v_boardings AS orca
    WHERE orca.txn_id = _txn_id;
   
    -- pull data from orca record into variables
    _orca_coach_number = _orca_txn_rec.coach_number;
    _orca_txn_dow = _orca_txn_rec.txn_dow;
    _orca_device_dtm_interval = _orca_txn_rec.device_dtm_interval;

    -- get gtfs data associated to orca txn and store record 
    WITH get_gtfs_rec AS (
        SELECT   
              gtfs.*
            , ROW_NUMBER() OVER (
                PARTITION BY orca.txn_id
                ORDER BY gtfs.feed_id DESC 
              ) AS latest_gtfs
        FROM orca.v_boardings AS orca
        LEFT JOIN trac.route_name_lookup AS lookup -- JOIN ON route name AND service_agency_id
            ON orca.route_number = lookup.route_number
            AND orca.service_agency_id = lookup.service_agency_id
        JOIN trac.agencies AS trac -- lookup TABLE for agency_id BETWEEN orca AND gtfs
            ON trac.orca_agency_id = orca.source_agency_id
            OR trac.agency_id = lookup.trac_agency_id
        JOIN gtfs_test.v_most_current_routes_with_associated_feed AS gtfs -- list of most up-to-date and date-unique gtfs route data
            ON (gtfs.route_short_name = orca.route_number
            OR COALESCE(gtfs.route_short_name, gtfs.route_long_name) ILIKE lookup.gtfs_route_name
            OR gtfs.route_id = orca.route_number )
            AND orca.business_date BETWEEN gtfs.start_date AND gtfs.end_date
            AND gtfs.trac_agency_id = trac.agency_id
        WHERE (orca.device_location IS NOT NULL OR orca.stop_code IS NOT NULL)
        AND orca.txn_id = _txn_id
    )
    SELECT *
    INTO _gtfs_rec
    FROM get_gtfs_rec
    WHERE latest_gtfs = 1;

    -- pull gtfs data from record into variables
    _gtfs_feed_id = _gtfs_rec.feed_id;
    _gtfs_route_id = _gtfs_rec.route_id;
    _trac_agency_id = _gtfs_rec.trac_agency_id;

    -- creates orca data variable that corrects cases where direction_id = 3 (unknown)
    -- if txn has direction id 3, we take the direction id of the closest boarding that DOESNT have direction_id = 3 
    -- and has same tap device, vehicle, business date, and route
    -- "closest" meaning:
        -- within 30 min and has smallest time_difference
    WITH get_correct_direction_id AS (
        SELECT 
              txn_id
            , corrected_direction_id
        FROM (
            SELECT  
                  b1.*
                , b2.direction_id AS corrected_direction_id
                , ROW_NUMBER() OVER (
                    PARTITION BY b1.txn_id
                    ORDER BY abs_interval(b1.device_dtm_pacific - b2.device_dtm_pacific)
                  ) AS ranked
                , abs_interval(b1.device_dtm_pacific - b2.device_dtm_pacific) AS time_difference 
            FROM orca.v_boardings AS b1
            JOIN orca.v_boardings AS b2
                ON b1.route_number = b2.route_number -- same route
                AND b1.device_id = b2.device_id -- same tapping device
                AND b1.coach_number = b2.coach_number -- same vehicle
                AND b1.business_date = b2.business_date -- same business date
                AND b1.direction_id = 3 
                AND b2.direction_id != 3
        ) ranked_data
        WHERE ranked = 1 
        AND time_difference <= '00:30:00' -- ADJUSTABLE
        AND txn_id = _txn_id
    )
    SELECT corrected_direction_id
    INTO _orca_corrected_direction_id
    FROM get_correct_direction_id;

    -- get avl data associated to orca txn and store record 
    -- check code depends on if orca and avl routes are the same and comparing orca and avl directions
    WITH d AS (
        SELECT
              avl.*
            , orca.txn_id
            , abs_interval(avl.departure_dtm_pacific - orca.device_dtm_pacific) AS time_diff
            , CASE 
                WHEN orca.route_number = avl.route_id -- same route
                    THEN   
                        CASE 
                            WHEN COALESCE(_orca_corrected_direction_id, orca.direction_id) = avl.direction_id 
                                THEN 1.1  -- everything IS good
                            WHEN COALESCE(_orca_corrected_direction_id, orca.direction_id) = 3 AND avl.direction_id IS NOT NULL 
                                THEN 1.2 -- UPDATE the orca direction WITH avl
                            WHEN COALESCE(_orca_corrected_direction_id, orca.direction_id) != 3 AND COALESCE(_orca_corrected_direction_id, orca.direction_id) != avl.direction_id 
                                THEN 1.3 -- need GTFS
                            WHEN avl.direction_id IS NULL 
                                THEN 1.4 -- need GTFS
                        END
                WHEN orca.route_number != avl.route_id -- NOT same route 
                    THEN 
                        CASE 
                            WHEN avl.direction_id IS NOT NULL 
                                THEN 2.1 -- BOTH orca AND avl direction exist, just aren't the same
                            ELSE 2.2 -- orca direction EXISTS but avl does NOT 
                        END
                WHEN avl.route_id IS NULL THEN 3  -- WHERE there IS NO AVL match
              END AS check_code
        FROM orca.v_boardings AS orca
            LEFT JOIN agency.v_avl AS avl
                ON avl.agency_id = orca.source_agency_id -- same agency
                AND avl.vehicle_id = orca.coach_number  -- same vehicle
                AND avl.stop_id = orca.stop_code  -- same stop
                AND abs_interval(avl.departure_dtm_pacific - orca.device_dtm_pacific) <= INTERVAL '5 minutes' -- WITHIN 5 min INTERVAL
            WHERE orca.txn_id = _txn_id
    )
    , get_avl_rec AS (
        SELECT
              *
            , ROW_NUMBER() OVER (
                PARTITION BY d.txn_id
                ORDER BY d.check_code, d.time_diff) AS ranked_avl -- orca_avl_time_interval 
          FROM d
    )
    SELECT *
    FROM get_avl_rec
    INTO _avl_rec
    WHERE ranked_avl = 1;

    -- pull data from avl record into variables
    _avl_route_id = _avl_rec.route_id;
    _avl_stop_id = _avl_rec.stop_id;
    _avl_direction_id = _avl_rec.direction_id;
    _avl_departure_dtm_pacific = _avl_rec.departure_dtm_pacific;
    _avl_check_code = _avl_rec.check_code;

    -- get trac data associated to orca txn
        -- trac check code, trip id, and stop data for comparison later
    WITH get_trac_data AS (
        SELECT    
              txn_id
            , trac_trip_id
            , gtfs.stop_id AS trac_stop_id
            , abs_interval(gtfs.departure_time - _orca_txn_rec.device_dtm_interval) AS trac_time_difference
            , gtfs.stop_location AS trac_stop_location
            , ST_Distance(st_transform(trip_ranked.device_location, 32610), gtfs.stop_location) AS distance_trac_orca
            , CASE
                WHEN (gtfs.stop_id = _orca_txn_rec.stop_code) IS TRUE
                    THEN 1 -- trac stop agree WITH orca stop
                WHEN (gtfs.stop_id = _orca_txn_rec.stop_code) IS FALSE
                    THEN 2 -- trac stop agree WITH orca stop
                WHEN _orca_txn_rec.stop_code IS NULL AND gtfs.stop_id IS NOT NULL
                    THEN 3 -- orca stop_code NOT EXISTS but we still have trac matched
                WHEN gtfs.stop_id IS NULL
                    THEN 4 -- NO trac matched
              END AS trac_check_code
            , ROW_NUMBER() OVER (
                -- PARTITION BY trip_ranked.txn_id
                -- choosing the shortest wait time trip for each shape id
                ORDER BY
                    CASE
                        WHEN (gtfs.stop_id = stop_code) IS TRUE
                            THEN 1 -- trac stop agree WITH orca stop
                        WHEN (gtfs.stop_id = stop_code) IS FALSE
                            THEN 2 -- trac stop agree WITH orca stop
                        WHEN stop_code IS NULL AND gtfs.stop_id IS NOT NULL
                            THEN 3 -- orca stop_code NOT EXISTS but we still have trac matched
                        WHEN gtfs.stop_id IS NULL
                            THEN 4 -- NO trac matched
                    END ASC, 
                    abs_interval(gtfs.departure_time - _orca_txn_rec.device_dtm_interval) ASC
              ) AS trac_rank
        FROM (
            SELECT
                  orca.* 
                , gtfs_td.trip_id AS trac_trip_id
                , gtfs_td.alt_direction_id AS trac_direction_ids
                , CASE
                    WHEN ARRAY[orca.stop_code] <@ gtfs_td.stops_arr -- prioritizing matching stop id 
                        THEN 1
                    ELSE 2
                  END stop_exist
                , ROW_NUMBER() OVER (
                    -- PARTITION BY orca.txn_id
                    -- choosing the shortest wait time trip for each shape id
                    ORDER BY
                          CASE
                            WHEN ARRAY[orca.stop_code] <@ gtfs_td.stops_arr -- prioritizing matching stop id 
                                THEN 1
                            ELSE 2
                          END ASC 
                        , CASE
                            WHEN ARRAY[orca.stop_code] <@ gtfs_td.stops_arr -- prioritizing matching stop id 
                                THEN 
                                    abs_interval(
                                        ( -- Calculate estimated arrival time for stop based on sequence position and trip duration
                                          -- estimate time of arrival for stop code based on sequence of stops and start and end time of trip
                                            (gtfs_td.first_stop_time - INTERVAL '3 minutes' + gtfs_td.last_stop_time + INTERVAL '15 minutes')
                                                /array_length(gtfs_td.stops_arr, 1) -- Divide duration by number of stops to get average time between stops
                                        )  
                                        * array_position(gtfs_td.stops_arr, orca.stop_code) -- Multiply average time between stops by position of stop code 
                                                                                            -- within sequence to estimate the arrival time for that stop.
                                        - _orca_txn_rec.device_dtm_interval) -- Subtract estimated arrival time for stop from ORCA device timestamp to get 
                                                                             -- estimated time difference
                            ELSE
                                abs_interval(
                                    ( (gtfs_td.first_stop_time - INTERVAL '3 minutes' + gtfs_td.last_stop_time + INTERVAL '15 minutes') / 2 )
                                    - _orca_txn_rec.device_dtm_interval
                                )
                          END
                  ) AS ranked
            FROM orca.v_boardings AS orca
            LEFT JOIN gtfs_test.v_gtfs_service_exceptions AS exc -- EXCEPTION service dates for the route/shape
                ON  exc.date = orca.business_date
                AND exc.trac_agency_id = _gtfs_rec.trac_agency_id
                AND exc.route_id = _gtfs_rec.route_id
                AND exc.feed_id = _gtfs_rec.feed_id
            LEFT JOIN gtfs_test.v_gtfs_trip_directions_corrected AS gtfs_td
                ON  gtfs_td.feed_id = _gtfs_rec.feed_id
                AND gtfs_td.route_id = _gtfs_rec.route_id
                AND gtfs_td.trac_agency_id = _gtfs_rec.trac_agency_id 
                AND _orca_txn_rec.device_dtm_interval BETWEEN gtfs_td.first_stop_time - INTERVAL '3 minutes' AND gtfs_td.last_stop_time + INTERVAL '15 minutes'-- txn must be WITHIN the FIRST AND LAST stop time
                AND ( -- JOIN ON direction
                    (ARRAY[COALESCE(_orca_corrected_direction_id, orca.direction_id)] <@ gtfs_td.alt_direction_id 
                        AND _avl_rec.check_code != 1.2)
                    OR(ARRAY[_avl_rec.direction_id] <@ gtfs_td.alt_direction_id
                        AND _avl_rec.check_code = 1.2)
                )
                AND
                    CASE
                        WHEN _orca_txn_rec.txn_dow = 0 -- SUNDAY
                            THEN
                                (gtfs_td.sunday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.sunday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.sunday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)
                                OR (gtfs_td.sunday IS NULL)
                        WHEN _orca_txn_rec.txn_dow = 1 -- MONDAY
                            THEN
                                (gtfs_td.monday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.monday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.monday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)
                                OR (gtfs_td.monday IS NULL)
                        WHEN _orca_txn_rec.txn_dow = 2 -- TUESDAY
                            THEN
                                (gtfs_td.tuesday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.tuesday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.tuesday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)
                                OR (gtfs_td.tuesday IS NULL)
                        WHEN _orca_txn_rec.txn_dow = 3 -- WEDNESDAY
                            THEN
                                (gtfs_td.wednesday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.wednesday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.wednesday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)
                                OR (gtfs_td.wednesday IS NULL)
                        WHEN _orca_txn_rec.txn_dow = 4 -- THURSDAY
                            THEN
                                (gtfs_td.thursday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.thursday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.thursday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)
                                OR (gtfs_td.thursday IS NULL)
                        WHEN _orca_txn_rec.txn_dow = 5 -- FRIDAY
                            THEN
                                (gtfs_td.friday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.friday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.friday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)
                                OR (gtfs_td.friday IS NULL)
                        WHEN _orca_txn_rec.txn_dow = 6 -- SATURDAY
                            THEN
                                (gtfs_td.saturday = 1 AND exc.exception_type IS NULL)
                                OR (gtfs_td.saturday = 1 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type != 2)
                                OR (gtfs_td.saturday = 0 AND exc.trip_id = gtfs_td.trip_id AND exc.exception_type = 1)  
                                OR (gtfs_td.saturday IS NULL)
                      END
            WHERE orca.txn_id = _txn_id
        ) AS trip_ranked
        LEFT JOIN gtfs_test.v_gtfs_trip_stop_sequence AS gtfs
            ON gtfs.trip_id = trip_ranked.trac_trip_id
            AND gtfs.route_id = _gtfs_rec.route_id
            AND gtfs.trac_agency_id = _gtfs_rec.trac_agency_id
            AND gtfs.feed_id = _gtfs_rec.feed_id
            AND CASE -- JOIN ON time OF txn time
                   WHEN trip_ranked.device_mode_id = 10 OR trip_ranked.device_mode_id = 11 -- lightrail OR sounder
                       THEN
                           gtfs.departure_time BETWEEN
                               _orca_txn_rec.device_dtm_interval + INTERVAL '1 minutes' -- AFTER tap, allow 1 min get to lightrail/sounder via stairs/elevators
                               AND _orca_txn_rec.device_dtm_interval + INTERVAL '45 minutes' -- AFTER tap, allow upto 30 mins BEFORE lightrail/sounder depart
                   ELSE -- bus
                       gtfs.departure_time BETWEEN
                           _orca_txn_rec.device_dtm_interval - INTERVAL '2 minutes' -- bus arriving 2 minutes early from the schedule
                           AND _orca_txn_rec.device_dtm_interval + INTERVAL '45 minutes' -- bus arriving 30 minutes late from the schedule
                   END
               AND CASE 
                   WHEN stop_exist = 1 
                       THEN
                           gtfs.stop_id =  trip_ranked.stop_code
                   ELSE TRUE 
                   END
        WHERE (
            (ranked = 1 AND stop_exist = 2)
            OR (ranked <= 3 AND stop_exist = 1)
        )
    )
    SELECT
          trac_check_code
        , trac_trip_id
        , trac_time_difference
        , trac_stop_id
        , trac_stop_location
    INTO
          _trac_check_code
        , _trac_trip_id
        , _trac_time_difference
        , _trac_stop_id
        , _trac_stop_location
    FROM get_trac_data
    WHERE txn_id = _txn_id;
          
          
            



--    WITH gtfs_ranked AS (
--        SELECT DISTINCT 
--              orca.*
--            , gtfs.trip_id AS gtfs_trip_id
--            , gtfs.stop_location AS gtfs_stop_location
--            , abs_interval(gtfs.departure_time - _orca_txn_rec.device_dtm_interval) AS gtfs_time_difference
--            , ST_Distance(st_transform(orca.device_location, 32610), st_transform(gtfs.stop_location, 32610)) AS distance_gtfs_orca
--            , gtfs.alt_direction_id AS gtfs_alt_direction_id
--            , CASE 
--                WHEN (ARRAY[COALESCE(_orca_corrected_direction_id, orca.direction_id)] <@ gtfs.alt_direction_id)
--                    THEN 1.1 -- WHEN orca matched
--                WHEN (ARRAY[_avl_rec.direction_id] <@ gtfs.alt_direction_id)
--                    THEN 1.2 -- WHEN orca does not matched but avl matched
--                WHEN gtfs.alt_direction_id IS NOT NULL
--                    THEN 1.3 -- the stop serve the route but none of direction matched
--                WHEN gtfs.alt_direction_id IS NULL
--                    THEN 2  -- WHEN this orca stop does NOT serve this route AT all
--              END AS gtfs_check_code
--            , ROW_NUMBER() OVER (
--                PARTITION BY orca.txn_id
--                ORDER BY
--                      CASE 
--                        WHEN (ARRAY[COALESCE(_orca_corrected_direction_id, orca.direction_id)] <@ gtfs.alt_direction_id)
--                              OR (ARRAY[_avl_rec.direction_id] <@ gtfs.alt_direction_id)
--                            THEN 1 -- WHEN orca/avl direction matched
--                        WHEN gtfs.alt_direction_id IS NOT NULL
--                            THEN 2 -- the stop serve the route but none of direction matched
--                        WHEN gtfs.alt_direction_id IS NULL
--                            THEN 3 -- WHEN this orca stop does NOT serve this route AT all
--                      END ASC -- FIRST, ORDER BY the direction
--                    , abs_interval(gtfs.departure_time - _orca_txn_rec.device_dtm_interval) ASC -- THEN BY the time difference
--              ) AS gtfs_rank
--        FROM orca.v_boardings AS orca
--        LEFT JOIN gtfs_test.v_gtfs_service_exceptions AS exc -- EXCEPTION service dates for the route/shape
--            ON orca.business_date = exc.date
--            AND exc.trac_agency_id = _gtfs_rec.trac_agency_id
--            AND exc.route_id = _gtfs_rec.route_id
--            AND exc.feed_id = _gtfs_rec.feed_id
--        LEFT JOIN gtfs_test.v_gtfs_trip_stop_sequence AS gtfs
--            ON gtfs.stop_id = orca.stop_code -- JOIN ON stop id
--            AND gtfs.route_id = _gtfs_rec.route_id
--            AND gtfs.trac_agency_id = _gtfs_rec.trac_agency_id
--            AND gtfs.feed_id = _gtfs_rec.feed_id
--            AND 
--                CASE -- JOIN ON time OF txn time
--                    WHEN orca.device_mode_id = 10 OR orca.device_mode_id = 11 -- lightrail OR sounder
--                           THEN
--                               gtfs.departure_time 
--                               -- AFTER tap, allow upto 1 min TO GET TO the lightrail/sounder BY stairs/elevators
--                               BETWEEN _orca_txn_rec.device_dtm_interval - INTERVAL '1 minutes' 
--                               -- AFTER tap, might need TO wait upto 30 mins BEFORE the lightrail/sounder depart
--                               AND _orca_txn_rec.device_dtm_interval + INTERVAL '45 minutes' 
--                    ELSE -- bus
--                           gtfs.departure_time 
--                           BETWEEN _orca_txn_rec.device_dtm_interval - INTERVAL '2 minutes' -- bus arriving 2 minutes early from the schedule
--                           AND _orca_txn_rec.device_dtm_interval + INTERVAL '45 minutes' -- bus arriving 30 minutes late from the schedule
--                END
--            AND -- JOIN ON service day
--                CASE
--                    WHEN _orca_txn_rec.txn_dow = 0 -- SUNDAY
--                        THEN
--                            (gtfs.sunday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.sunday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.sunday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)
--                            OR (gtfs.sunday IS NULL)
--                    WHEN _orca_txn_rec.txn_dow = 1 -- MONDAY
--                        THEN
--                            (gtfs.monday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.monday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.monday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)
--                            OR (gtfs.monday IS NULL)
--                    WHEN _orca_txn_rec.txn_dow = 2 -- TUESDAY
--                        THEN
--                            (gtfs.tuesday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.tuesday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.tuesday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)
--                            OR (gtfs.tuesday IS NULL)
--                    WHEN _orca_txn_rec.txn_dow = 3 -- WEDNESDAY
--                        THEN
--                            (gtfs.wednesday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.wednesday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.wednesday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)
--                            OR (gtfs.wednesday IS NULL)
--                    WHEN _orca_txn_rec.txn_dow = 4 -- THURSDAY
--                        THEN
--                            (gtfs.thursday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.thursday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.thursday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)
--                            OR (gtfs.thursday IS NULL)
--                    WHEN _orca_txn_rec.txn_dow = 5 -- FRIDAY
--                        THEN
--                            (gtfs.friday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.friday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.friday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)
--                            OR (gtfs.friday IS NULL)
--                    WHEN _orca_txn_rec.txn_dow = 6 -- SATURDAY
--                        THEN
--                            (gtfs.saturday = 1 AND exc.exception_type IS NULL)
--                            OR (gtfs.saturday = 1 AND exc.trip_id = gtfs.trip_id AND exc.exception_type != 2)
--                            OR (gtfs.saturday = 0 AND exc.trip_id = gtfs.trip_id AND exc.exception_type = 1)  
--                            OR (gtfs.saturday IS NULL)
--                END
--        WHERE txn_id = _txn_id
--    )
--    SELECT 
--          gtfs_trip_id
--        , gtfs_check_code
--        , gtfs_time_difference
--        , gtfs_stop_location
--    INTO 
--          _gtfs_trip_id
--        , _gtfs_check_code
--        , _gtfs_time_difference
--        , _gtfs_stop_location
--    FROM gtfs_ranked
--    WHERE gtfs_rank = 1
--    AND txn_id = _txn_id;






--    WITH get_final_data AS (
--        SELECT 
--              txn_id
--            , CASE
--                WHEN _avl_check_code = 2.1 OR _avl_check_code = 2.2 OR (_trac_check_code = 4 AND _gtfs_check_code = 2)
--                    THEN NULL -- cant locate
--                WHEN _gtfs_check_code = 1.1 -- orca-orca
--                    THEN _gtfs_trip_id
--                WHEN _gtfs_check_code = 1.2 -- avl-orca
--                    THEN _gtfs_trip_id
--                WHEN _gtfs_check_code = 2 -- orca-trac
--                    THEN _trac_trip_id
--                WHEN (_avl_check_code < 2 AND _gtfs_check_code = 1.3) OR (_avl_check_code = 3 AND _trac_check_code = 4 AND _gtfs_check_code = 1.3)
--                    THEN _gtfs_trip_id --'gtfs'
--                WHEN _avl_check_code = 3 AND _trac_check_code = 2 AND _gtfs_check_code = 1.3 
--                    THEN 
--                        CASE 
--                            WHEN _gtfs_time_difference < _trac_time_difference -- gtfs-orca
--                                THEN _gtfs_trip_id --'gtfs'
--                            WHEN _gtfs_time_difference >= _trac_time_difference -- orca-trac
--                                THEN _trac_trip_id
--                            ELSE '-99' -- extra case, this IS FOR double checking
--                        END
--              END AS trip_id
--            , CASE
--                WHEN _avl_check_code = 2.1 OR _avl_check_code = 2.2 OR (_trac_check_code = 4 AND _gtfs_check_code = 2)
--                    THEN NULL -- cant locate
--                WHEN _gtfs_check_code = 1.1 -- orca-orca
--                    THEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id)
--                WHEN _gtfs_check_code = 1.2 -- avl-orca
--                    THEN _avl_rec.direction_id
--                WHEN _gtfs_check_code = 2 -- orca-trac
--                    THEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id)
--                WHEN (_avl_check_code < 2 AND _gtfs_check_code = 1.3) OR (_avl_check_code = 3 AND _trac_check_code = 4 AND _gtfs_check_code = 1.3)
--                    THEN 
--                        CASE 
--                            WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 4 
--                                THEN 5
--                            WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 5 
--                                THEN 4
--                            WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 6 
--                                THEN 7
--                            WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 7 
--                                THEN 6
--                        END
--                WHEN _avl_check_code = 3 AND _trac_check_code = 2 AND _gtfs_check_code = 1.3 -- other-other
--                    THEN 
--                        CASE 
--                            WHEN _gtfs_time_difference < _trac_time_difference
--                                THEN 
--                                    CASE -- gtfs-orca
--                                        WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 4 THEN 5
--                                        WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 5 THEN 4
--                                        WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 6 THEN 7
--                                        WHEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) = 7 THEN 6
--                                    END 
--                            WHEN _gtfs_time_difference >= _trac_time_difference
--                                THEN COALESCE(_orca_corrected_direction_id, _orca_txn_rec.direction_id) -- orca-trac
--                            ELSE -99 -- extra case
--                        END
--                END AS direction_final
--            , CASE
--                WHEN _avl_check_code = 2.1 OR _avl_check_code = 2.2 OR (_trac_check_code = 4 AND _gtfs_check_code = 2)
--                    THEN -1 -- cant locate
--                WHEN _gtfs_check_code = 1.1 -- orca-orca
--                    THEN 
--                        CASE -- either orca updated direction, OR orca original !!
--                            WHEN _orca_corrected_direction_id IS NOT NULL 
--                                THEN 2 -- 'orca updated'
--                            ELSE 1 -- 'orca'
--                        END
--                WHEN _gtfs_check_code = 1.2 -- avl-orca
--                    THEN 3 -- avl
--                WHEN _gtfs_check_code = 2 -- orca-trac
--                    THEN 
--                        CASE 
--                            WHEN _orca_corrected_direction_id IS NOT NULL 
--                                THEN 2 --'orca updated'
--                            ELSE 1 --'orca'
--                        END
--                WHEN (_avl_check_code < 2 AND _gtfs_check_code = 1.3) OR (_avl_check_code = 3 AND _trac_check_code = 4 AND _gtfs_check_code = 1.3)
--                        THEN 4 --'gtfs'
--                WHEN _avl_check_code = 3 AND _trac_check_code = 2 AND _gtfs_check_code = 1.3 
--                    THEN 
--                        CASE 
--                            WHEN _gtfs_time_difference < _trac_time_difference -- gtfs-orca
--                                THEN 4 --'gtfs'
--                            WHEN _gtfs_time_difference >= _trac_time_difference -- orca-trac
--                                THEN 
--                                    CASE -- either orca updated direction, OR orca original !!
--                                        WHEN _orca_corrected_direction_id IS NOT NULL 
--                                            THEN 2 --'orca updated'
--                                        ELSE 1 --'orca'
--                                    END
--                            ELSE -99 -- extra case, this IS FOR double checking
--                        END
--              END AS direction_note
--            , CASE
--                WHEN _avl_check_code = 2.1 OR _avl_check_code = 2.2 OR (_trac_check_code = 4  AND _gtfs_check_code = 2)
--                    THEN NULL -- cant locate
--                WHEN _gtfs_check_code = 1.1 -- orca-orca
--                    THEN stop_code
--                WHEN _gtfs_check_code = 1.2 -- avl-orca
--                    THEN stop_code
--                WHEN _gtfs_check_code = 2 -- orca-trac
--                    THEN _trac_stop_id
--                WHEN (_avl_check_code < 2 AND _gtfs_check_code = 1.3) OR (_avl_check_code = 3 AND _trac_check_code = 4 AND _gtfs_check_code = 1.3)
--                    THEN stop_code
--                WHEN _avl_check_code = 3 AND _trac_check_code = 2 AND _gtfs_check_code = 1.3 -- other-other
--                    THEN 
--                        CASE 
--                            WHEN _gtfs_time_difference < _trac_time_difference
--                                THEN stop_code -- gtfs-orca
--                            WHEN _gtfs_time_difference >= _trac_time_difference
--                                THEN _trac_stop_id -- orca-trac
--                            ELSE '-99' -- extra case, this IS FOR doublechecking
--                        END
--              END AS stop_final
--            , CASE
--                WHEN _avl_check_code = 2.1 OR _avl_check_code = 2.2 OR (_trac_check_code = 4 AND _gtfs_check_code = 2)
--                    THEN -1 -- cant locate
--                WHEN _gtfs_check_code = 1.1 -- orca-orca
--                    THEN 1 -- orca
--                WHEN _gtfs_check_code = 1.2 -- avl-orca
--                    THEN 1 -- orca
--                WHEN _gtfs_check_code = 2 -- orca-trac
--                    THEN 5 -- trac
--                WHEN (_avl_check_code < 2 AND _gtfs_check_code = 1.3) OR (_avl_check_code = 3 AND _trac_check_code = 4 AND _gtfs_check_code = 1.3)
--                    THEN 1 -- orca
--                WHEN _avl_check_code = 3 AND _trac_check_code = 2 AND _gtfs_check_code = 1.3
--                    THEN 
--                        CASE 
--                            WHEN _gtfs_time_difference < _trac_time_difference -- gtfs-orca
--                                THEN 1 -- orca
--                            WHEN _gtfs_time_difference >= _trac_time_difference  -- orca-trac
--                                THEN 5 -- trac
--                            ELSE -99 -- this IS FOR doublechecking
--                        END
--              END AS stop_note
--            , CASE
--                WHEN _avl_check_code = 2.1 OR _avl_check_code = 2.2 OR (_trac_check_code = 4 AND _gtfs_check_code = 2)
--                    THEN NULL -- cant locate
--                WHEN _gtfs_check_code = 1.1 -- orca-orca
--                    THEN _gtfs_stop_location
--                WHEN _gtfs_check_code = 1.2 -- avl-orca
--                    THEN _gtfs_stop_location
--                WHEN _gtfs_check_code = 2 -- orca-trac
--                    THEN _trac_stop_location
--                WHEN (_avl_check_code < 2 AND _gtfs_check_code = 1.3) OR (_avl_check_code = 3 AND _trac_check_code = 4 AND _gtfs_check_code = 1.3)
--                    THEN _gtfs_stop_location
--                WHEN _avl_check_code = 3 AND _trac_check_code = 2 AND _gtfs_check_code = 1.3 -- other-other
--                    THEN 
--                        CASE 
--                            WHEN _gtfs_time_difference < _trac_time_difference
--                                THEN _gtfs_stop_location -- gtfs-orca
--                            WHEN _gtfs_time_difference >= _trac_time_difference
--                                THEN _trac_stop_location -- orca-trac
--                            ELSE NULL -- extra case
--                        END
--              END AS stop_location
--        FROM orca.v_boardings
--    )
--    SELECT 
--          trip_id
--        , direction_final
--        , direction_note
--        , stop_final
--        , stop_note
--        , stop_location
--    INTO 
--          _final_trip_id
--        , _direction_final
--        , _direction_note
--        , _stop_final
--        , _stop_note
--        , _stop_location
--    FROM get_final_data
--    WHERE txn_id = _txn_id;
    


--    INSERT INTO gtfs_test.dummy VALUES (
--          _trac_check_code
--        , _trac_trip_id
--        , _trac_time_difference
--        , _trac_stop_id
--        , _trac_stop_location
--    );

    INSERT INTO gtfs_test.test_final_table VALUES (
          _txn_id
        , _orca_coach_number
        , _gtfs_feed_id
        , _gtfs_route_id
        , _final_trip_id
        , _trac_agency_id
        , _avl_route_id
        , _avl_stop_id
        , _avl_direction_id
        , _avl_departure_dtm_pacific
        , _avl_check_code
        , _trac_check_code
        , _gtfs_check_code
        , _direction_final
        , _direction_note
        , _stop_final
        , _stop_note
        , _stop_location);
    
    
    
END;
$$;


--CREATE TABLE gtfs_test.test_final_table(
--     txn_id INT,
--    coach_number TEXT, 
--    feed_id INT, 
--    gtfs_route_id TEXT, 
--    gtfs_trip_id TEXT, 
--    trac_agency_id INT, 
--    avl_route TEXT, 
--    avl_stop TEXT, 
--    avl_direction INT, 
--    avl_departure_dtm TIMESTAMP, 
--    avl_check_code NUMERIC, 
--    trac_check_code INT, 
--    gtfs_check_code NUMERIC, 
--    direction_final INT, 
--    direction_note INT, 
--    stop_final TEXT, 
--    stop_note INT, 
--    stop_location geometry
--);
-- DROP TABLE gtfs_test.test_final_table

-- SELECT * FROM _test.boarding_action_final_april23_20240413 ORDER BY RANDOM()LIMIT 10

-- CALL gtfs_test.do_a_thing(209009706);
-- CALL gtfs_test.do_a_thing(210597644);
-- CALL gtfs_test.do_a_thing(205860430);
-- CALL gtfs_test.do_a_thing(209287826);
-- CALL gtfs_test.do_a_thing(209799166);
-- CALL gtfs_test.do_a_thing(206290632);
-- CALL gtfs_test.do_a_thing(203434032);
-- CALL gtfs_test.do_a_thing(213290334);
-- CALL gtfs_test.do_a_thing(213907462);
-- CALL gtfs_test.do_a_thing(200595486);

-- SELECT * FROM gtfs_test.test_final_table;

-- TRUNCATE gtfs_test.test_final_table
